#!/bin/sh
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007-2022  IPFire Team  <info@ipfire.org>                     #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /etc/sysconfig/rc
. ${rc_functions}

find_interface() {
	local address="${1}"

	local path
	for path in /sys/class/net/*; do
		if [ -s "${path}/address" ] && [ "$(<${path}/address)" = "${address}" ]; then
			basename "${path}"
			return 0
		fi
	done

	return 1;
}

write_config() {
	# Header
	echo "# Automatically generated configuration"
	echo "# DO NOT EDIT"

	# Enable logging
	echo "logger_syslog=-1"
	echo "logger_syslog_level=4"

	# Use Netlink
	echo "driver=nl80211"

	# Set the country code
	echo "country_code=${COUNTRY}"
	echo "country3=0x49"

	# Enable 802.11d and 802.11h
	echo "ieee80211d=1"
	echo "ieee80211h=1"

	# Set the channel (if chosen)
	if [ -n "${CHANNEL}" ]; then
		echo "channel=${CHANNEL}"
	fi

	# Always advertise TPC
	echo "local_pwr_constraint=3"
	echo "spectrum_mgmt_required=1"

	# Set mode
	case "${HW_MODE}" in
		ac)
			echo "hw_mode=a"
			echo "ieee80211ac=1"
			echo "ieee80211n=1"
			echo "wmm_enabled=1"
			echo "vht_oper_chwidth=1"
			;;
		an|gn)
			echo "hw_mode=${HW_MODE:0:1}"
			echo "ieee80211n=1"
			echo "wmm_enabled=1"
			;;
		*)
			echo "Unsupported mode '${HW_MODE}'" >&2
			return 1
			;;
	esac

	# Set HT capabilities
	if [ -n "${HTCAPS}" ]; then
		echo "ht_capab=${HTCAPS}"
	fi

	# Set VHT capabilities
	if [ -n "${VHTCAPS}" ]; then
		echo "vht_capab=${VHTCAPS}"
	fi

	# Enable authentication
	echo "auth_algs=1"

	# Enable the control interface
	echo "ctrl_interface=/var/run/hostapd"
	echo "ctrl_interface_group=0"

	# Disconnect clients that are too far away
	echo "disassoc_low_ack=1"

	# SSID
	echo "ssid2=\"${SSID}\""
	echo "utf8_ssid=1"

	# Hide the SSID?
	if [ "${HIDESSID}" = "on" ]; then
		echo "ignore_broadcast_ssid=2"
	fi

	# Isolate clients?
	if [ "${CLIENTISOLATION}" = "on" ]; then
		echo "ap_isolate=1"
	fi

	# Disable neighbour scan?
	if [ "${NOSCAN}" = "on" ]; then
		echo "noscan=1"
	else
		echo "noscan=0"
	fi

	# Management Frame Protection (802.11w)
	case "${IEEE80211W}" in
		on)
			echo "ieee80211w=2"

			# Enable beacon protection
			echo "beacon_prot=1"

			# Enable Operating Channel Validation
			echo "ocv=1"
			;;

		optional)
			echo "ieee80211w=1"

			# Enable beacon protection
			echo "beacon_prot=1"

			# Enable OCV in compatibility mode for broken stations
			echo "ocv=2"
			;;
		*)
			echo "ieee80211w=0"
			;;
	esac

	# Encryption
	case "${ENC}" in
		wpa3)
			echo "wpa=2"
			echo "wpa_passphrase=${PWD}"
			echo "wpa_key_mgmt=SAE"
			echo "rsn_pairwise=CCMP"
			;;
		wpa2+3)
			echo "wpa=2"
			echo "wpa_passphrase=${PWD}"
			echo "wpa_key_mgmt=WPA-PSK WPA-PSK-SHA256 SAE"
			echo "rsn_pairwise=CCMP"
			;;
		wpa2)
			echo "wpa=2"
			echo "wpa_passphrase=${PWD}"
			echo "wpa_key_mgmt=WPA-PSK WPA-PSK-SHA256"
			echo "rsn_pairwise=CCMP"
			;;
		wpa1+2)
			echo "wpa=3"
			echo "wpa_passphrase=${PWD}"
			echo "wpa_key_mgmt=WPA-PSK WPA-PSK-SHA256"
			echo "wpa_pairwise=TKIP"
			echo "rsn_pairwise=CCMP"
			;;
		wpa1)
			echo "wpa=1"
			echo "wpa_passphrase=${PWD}"
			echo "wpa_key_mgmt=WPA-PSK WPA-PSK-SHA256"
			echo "wpa_pairwise=TKIP"
			;;
	esac

	# Multi-Band Operation - prefer WiFi over mobile networks
	# This feature requires Management Frame Protection
	case "${IEEE80211W}" in
		on|optional)
			echo "mbo=1"
			echo "mbo_cell_data_conn_pref=1"
			;;
	esac

	# Always enable SSID protection
	echo "ssid_protection=1"

	# Extended Key ID support for Individually Addressed frames
	echo "extended_key_id=1"

	# Fully enable Optimized Connectivity Experience
	echo "oce=7"

	# Enable 802.11u Interworking Support
	echo "interworking=1"

	# 802.11u: We are a private network
	echo "access_network_type=0"

	# 802.11u: We have internet access
	echo "internet=1"

	# 802.11v: Advertise the time
	echo "time_advertisement=2"

	return 0
}

eval $(/usr/local/bin/readhash /var/ipfire/wlanap/settings)

case "${1}" in
	start)
		interface="$(find_interface "${INTERFACE}")"
		if [ -z "${interface}" ]; then
			boot_mesg "Could not find interface with address ${INTERFACE} for wireless access point"
			echo_failure
			exit 1
		fi

		# Write the configuration
		if ! write_config > /etc/hostapd.conf; then
			boot_mesg "Failed to generate configuration"
			echo_failure
			exit 1
		fi

		boot_mesg "Starting hostapd... "
		loadproc /usr/bin/hostapd -s -B /etc/hostapd.conf -i "${interface}"
		;;

	stop)
		boot_mesg "Stopping hostapd..."
		killproc /usr/bin/hostapd
		evaluate_retval
		;;

	restart)
		${0} stop
		sleep 1
		${0} start
		;;

	status)
		statusproc /usr/bin/hostapd
		;;

	show-config)
		write_config
		;;

	*)
		echo "Usage: ${0} {start|stop|restart|status}"
		exit 1
		;;
esac

diff -up dhcp-4.3.1b1/client/clparse.c.fLPqYB dhcp-4.3.1b1/client/clparse.c
--- dhcp-4.3.1b1/client/clparse.c.fLPqYB	2014-07-02 19:58:38.000000000 +0200
+++ dhcp-4.3.1b1/client/clparse.c	2014-07-10 17:38:26.938599402 +0200
@@ -148,6 +148,7 @@ isc_result_t read_client_conf ()
 	/* Requested lease time, used by DHCPv6 (DHCPv4 uses the option cache)
 	 */
 	top_level_config.requested_lease = 7200;
+	top_level_config.bootp_broadcast_always = 0;
 
 	group_allocate (&top_level_config.on_receipt, MDL);
 	if (!top_level_config.on_receipt)
@@ -353,7 +354,8 @@ void read_client_leases ()
 	interface-declaration |
 	LEASE client-lease-statement |
 	ALIAS client-lease-statement |
-	KEY key-definition */
+	KEY key-definition |
+	BOOTP_BROADCAST_ALWAYS */
 
 void parse_client_statement (cfile, ip, config)
 	struct parse *cfile;
@@ -771,6 +773,12 @@ void parse_client_statement (cfile, ip,
 		parse_reject_statement (cfile, config);
 		return;
 
+	      case BOOTP_BROADCAST_ALWAYS:
+		token = next_token(&val, (unsigned*)0, cfile);
+		config -> bootp_broadcast_always = 1;
+		parse_semi (cfile);
+		return;
+
 	      default:
 		lose = 0;
 		stmt = (struct executable_statement *)0;
diff -up dhcp-4.3.1b1/client/dhclient.8.fLPqYB dhcp-4.3.1b1/client/dhclient.8
--- dhcp-4.3.1b1/client/dhclient.8.fLPqYB	2014-07-02 19:58:38.000000000 +0200
+++ dhcp-4.3.1b1/client/dhclient.8	2014-07-10 17:38:26.938599402 +0200
@@ -128,6 +128,33 @@ dhclient - Dynamic Host Configuration Pr
 .B -w
 ]
 [
+.B -B
+]
+[
+.B -C
+.I dhcp-client-identifier
+]
+[
+.B -H
+.I host-name
+]
+[
+.B -F
+.I fqdn.fqdn
+]
+[
+.B -V
+.I vendor-class-identifier
+]
+[
+.B -R
+.I request-option-list
+]
+[
+.B -timeout
+.I timeout
+]
+[
 .B -v
 ]
 [
@@ -275,6 +302,69 @@ not to exit when it doesn't find any suc
 program can then be used to notify the client when a network interface
 has been added or removed, so that the client can attempt to configure an IP
 address on that interface.
+
+.TP
+.BI \-B
+Set the BOOTP broadcast flag in request packets so servers will always
+broadcast replies.
+
+.TP
+.BI \-C\ <dhcp-client-identifier>
+Specify the dhcp-client-identifier option to send to the DHCP server.
+
+.TP
+.BI \-H\ <host-name>
+Specify the host-name option to send to the DHCP server.  The host-name
+string only contains the client's hostname prefix, to which the server will
+append the ddns-domainname or domain-name options, if any, to derive the
+fully qualified domain name of the client.  The
+.B -H
+option cannot be used with the
+.B -F
+option.
+
+.TP
+.BI \-F\ <fqdn.fqdn>
+Specify the fqdn.fqdn option to send to the DHCP server.  This option cannot
+be used with the
+.B -H
+option.  The fqdn.fqdn option must specify the complete domain name of the
+client host, which the server may use for dynamic DNS updates.
+
+.TP
+.BI \-V\ <vendor-class-identifier>
+Specify the vendor-class-identifier option to send to the DHCP server.
+
+.TP
+.BI \-R\ <option>[,<option>...]
+Specify the list of options the client is to request from the server.  The
+option list must be a single string consisting of option names separated
+by at least one command and optional space characters.  The default option
+list is:
+
+.BR
+    subnet-mask, broadcast-address, time-offset, routers,
+.BR
+    domain-search, domain-name, domain-name-servers, host-name, 
+.BR
+    nis-domain, nis-servers, ntp-servers, interface-mtu
+
+.TP
+.B -R
+option does not append options to the default request, it overrides the
+default request list.  Keep this in mind if you want to request an
+additional option besides the default request list.  You will have to
+specify all option names for the
+.B -R
+parameter.
+
+.TP
+.BI \-timeout\ <timeout>
+Specify the time after which
+.B dhclient
+will decide that no DHCP servers can be contacted when no responses have been
+received.
+
 .TP
 .BI \-n
 Do not configure any interfaces.  This is most likely to be useful in
diff -up dhcp-4.3.1b1/client/dhclient.c.fLPqYB dhcp-4.3.1b1/client/dhclient.c
--- dhcp-4.3.1b1/client/dhclient.c.fLPqYB	2014-07-02 19:58:38.000000000 +0200
+++ dhcp-4.3.1b1/client/dhclient.c	2014-07-10 17:38:44.520350055 +0200
@@ -39,6 +39,12 @@
 #include <limits.h>
 #include <dns/result.h>
 
+/*
+ * Defined in stdio.h when _GNU_SOURCE is set, but we don't want to define
+ * that when building ISC code.
+ */
+extern int asprintf(char **strp, const char *fmt, ...);
+
 TIME default_lease_time = 43200; /* 12 hours... */
 TIME max_lease_time = 86400; /* 24 hours... */
 
@@ -88,6 +94,9 @@ int wanted_ia_na = -1;		/* the absolute
 int wanted_ia_ta = 0;
 int wanted_ia_pd = 0;
 char *mockup_relay = NULL;
+int bootp_broadcast_always = 0;
+
+extern struct option *default_requested_options[];
 
 void run_stateless(int exit_mode);
 
@@ -125,6 +134,15 @@ main(int argc, char **argv) {
 	int local_family_set = 0;
 #endif /* DHCPv6 */
 	char *s;
+	char *dhcp_client_identifier_arg = NULL;
+	char *dhcp_host_name_arg = NULL;
+	char *dhcp_fqdn_arg = NULL;
+	char *dhcp_vendor_class_identifier_arg = NULL;
+	char *dhclient_request_options = NULL;
+
+	int timeout_arg = 0;
+	char *arg_conf = NULL;
+	int arg_conf_len = 0;
 
 	/* Initialize client globals. */
 	memset(&default_duid, 0, sizeof(default_duid));
@@ -325,6 +343,88 @@ main(int argc, char **argv) {
 					 strlen(PACKAGE_VERSION)));
 			IGNORE_RET(write(STDERR_FILENO, "\n", 1));
 			exit(0);
+		} else if (!strcmp(argv[i], "-C")) {
+			if ((++i == argc) || (argv[i] == NULL) || (*(argv[i])=='\0')) {
+				usage();
+				exit(1);
+			}
+
+			if (strlen(argv[i]) >= DHCP_MAX_OPTION_LEN) {
+				log_error("-C option dhcp-client-identifier string \"%s\" is too long - maximum length is: %d", argv[i], DHCP_MAX_OPTION_LEN-1);
+				exit(1);
+			}
+
+			dhcp_client_identifier_arg = argv[i];
+		} else if (!strcmp(argv[i], "-B")) {
+			bootp_broadcast_always = 1;
+		} else if (!strcmp(argv[i], "-H")) {
+			if ((++i == argc) || (argv[i] == NULL) || (*(argv[i])=='\0')) {
+				usage();
+				exit(1);
+			}
+
+			if (strlen(argv[i]) >= DHCP_MAX_OPTION_LEN) {
+				log_error("-H option host-name string \"%s\" is too long - maximum length is: %d", argv[i], DHCP_MAX_OPTION_LEN-1);
+				exit(1);
+			}
+
+			if (dhcp_host_name_arg != NULL) {
+				log_error("The -H <host-name> and -F <fqdn> arguments are mutually exclusive");
+				exit(1);
+			}
+
+			dhcp_host_name_arg = argv[i];
+		} else if (!strcmp(argv[i], "-F")) {
+			if ((++i == argc) || (argv[i] == NULL) || (*(argv[i])=='\0')) {
+				usage();
+				exit(1);
+			}
+
+			if (strlen(argv[i]) >= DHCP_MAX_OPTION_LEN) {
+				log_error("-F option fqdn.fqdn string \"%s\" is too long - maximum length is: %d", argv[i], DHCP_MAX_OPTION_LEN-1);
+				exit(1);
+			}
+
+			if (dhcp_fqdn_arg != NULL) {
+				log_error("Only one -F <fqdn> argument can be specified");
+				exit(1);
+			}
+
+			if (dhcp_host_name_arg != NULL) {
+				log_error("The -F <fqdn> and -H <host-name> arguments are mutually exclusive");
+				exit(1);
+			}
+
+			dhcp_fqdn_arg = argv[i];
+		} else if (!strcmp(argv[i], "-timeout")) {
+			if ((++i == argc) || (argv[i] == NULL) || (*(argv[i])=='\0')) {
+				usage();
+				exit(1);
+			}
+
+			if ((timeout_arg = atoi(argv[i])) <= 0) {
+				log_error("timeout option must be > 0 - bad value: %s",argv[i]);
+				exit(1);
+			}
+		} else if (!strcmp(argv[i], "-V")) {
+			if ((++i == argc) || (argv[i] == NULL) || (*(argv[i])=='\0')) {
+				usage();
+				exit(1);
+			}
+
+			if (strlen(argv[i]) >= DHCP_MAX_OPTION_LEN) {
+				log_error("-V option vendor-class-identifier string \"%s\" is too long - maximum length is: %d", argv[i], DHCP_MAX_OPTION_LEN-1);
+				exit(1);
+			}
+
+			dhcp_vendor_class_identifier_arg = argv[i];
+		} else if (!strcmp(argv[i], "-R")) {
+			if ((++i == argc) || (argv[i] == NULL) || (*(argv[i])=='\0')) {
+				usage();
+				exit(1);
+			}
+
+			dhclient_request_options = argv[i];
 		} else if (argv[i][0] == '-') {
 		    usage();
 		} else if (interfaces_requested < 0) {
@@ -507,6 +607,156 @@ main(int argc, char **argv) {
 	/* Parse the dhclient.conf file. */
 	read_client_conf();
 
+	/* Parse any extra command line configuration arguments: */
+	if ((dhcp_client_identifier_arg != NULL) && (*dhcp_client_identifier_arg != '\0')) {
+		arg_conf_len = asprintf(&arg_conf, "send dhcp-client-identifier \"%s\";", dhcp_client_identifier_arg);
+
+		if ((arg_conf == 0) || (arg_conf_len <= 0))
+			log_fatal("Unable to send -C option dhcp-client-identifier");
+	}
+
+	if ((dhcp_host_name_arg != NULL) && (*dhcp_host_name_arg != '\0')) {
+		if (arg_conf == 0) {
+			arg_conf_len = asprintf(&arg_conf, "send host-name \"%s\";", dhcp_host_name_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to send -H option host-name");
+		} else {
+			char *last_arg_conf = arg_conf;
+			arg_conf = NULL;
+			arg_conf_len = asprintf(&arg_conf, "%s\nsend host-name \"%s\";", last_arg_conf, dhcp_host_name_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to send -H option host-name");
+
+			free(last_arg_conf);
+		}
+	}
+
+	if ((dhcp_fqdn_arg != NULL) && (*dhcp_fqdn_arg != '\0')) {
+		if (arg_conf == 0) {
+			arg_conf_len = asprintf(&arg_conf,  "send fqdn.fqdn \"%s\";", dhcp_fqdn_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to send -F option fqdn.fqdn");
+		} else {
+			char *last_arg_conf = arg_conf;
+			arg_conf = NULL;
+			arg_conf_len = asprintf(&arg_conf, "%s\nsend fqdn.fqdn \"%s\";", last_arg_conf, dhcp_fqdn_arg);
+
+			if ((arg_conf == 0)  || (arg_conf_len <= 0))
+				log_fatal("Unable to send -F option fqdn.fqdn");
+
+			free(last_arg_conf);
+		}
+	}
+
+	if (timeout_arg) {
+		if (arg_conf == 0) {
+			arg_conf_len = asprintf(&arg_conf,  "timeout %d;", timeout_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to process -timeout timeout argument");
+		} else {
+			char *last_arg_conf = arg_conf;
+			arg_conf = NULL;
+			arg_conf_len = asprintf(&arg_conf, "%s\ntimeout %d;", last_arg_conf, timeout_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len == 0))
+				log_fatal("Unable to process -timeout timeout argument");
+
+			free(last_arg_conf);
+		}
+	}
+
+	if ((dhcp_vendor_class_identifier_arg != NULL) && (*dhcp_vendor_class_identifier_arg != '\0')) {
+		if (arg_conf == 0) {
+			arg_conf_len = asprintf(&arg_conf,  "send vendor-class-identifier \"%s\";", dhcp_vendor_class_identifier_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to send -V option vendor-class-identifier");
+		} else {
+			char *last_arg_conf = arg_conf;
+			arg_conf = NULL;
+			arg_conf_len = asprintf(&arg_conf, "%s\nsend vendor-class-identifier \"%s\";", last_arg_conf, dhcp_vendor_class_identifier_arg);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to send -V option vendor-class-identifier");
+
+			free(last_arg_conf);
+		}
+	}
+
+	if (dhclient_request_options != NULL) {
+		if (arg_conf == 0) {
+			arg_conf_len = asprintf(&arg_conf,  "request %s;", dhclient_request_options);
+
+			if ((arg_conf == 0) || (arg_conf_len <= 0))
+				log_fatal("Unable to parse -R <request options list> argument");
+		} else {
+			char *last_arg_conf = arg_conf;
+			arg_conf = NULL;
+			arg_conf_len = asprintf(&arg_conf, "%s\nrequest %s;", last_arg_conf, dhclient_request_options);
+
+			if ((arg_conf == 0)  || (arg_conf_len <= 0))
+				log_fatal("Unable to parse -R <request options list> argument");
+
+			free(last_arg_conf);
+		}
+	}
+
+	if (arg_conf) {
+		if (arg_conf_len == 0)
+			if ((arg_conf_len = strlen(arg_conf)) == 0)
+				/* huh ? cannot happen ! */
+				log_fatal("Unable to process -C/-H/-F/-timeout/-V/-R configuration arguments");
+
+		/* parse the extra dhclient.conf configuration arguments
+		 * into top level config: */
+		struct parse *cfile = (struct parse *)0;
+		const char *val = NULL;
+		int token;
+
+		status = new_parse(&cfile, -1, arg_conf, arg_conf_len, "extra dhclient -C/-H/-F/-timeout/-V/-R configuration arguments", 0);
+
+		if ((status != ISC_R_SUCCESS) || (cfile -> warnings_occurred))
+			log_fatal("Cannot parse -C/-H/-F/-timeout/-V/-R configuration arguments !");
+		/* more detailed parse failures will be logged */
+
+		do {
+			token = peek_token(&val, (unsigned *)0, cfile);
+			if (token == END_OF_FILE)
+				break;
+
+			parse_client_statement(cfile, (struct interface_info *)0, &top_level_config);
+		} while (1);
+
+		if (cfile -> warnings_occurred)
+			log_fatal("Cannot parse -C/-H/-F/-timeout/-V/-R configuration arguments !");
+		end_parse(&cfile);
+
+		if (timeout_arg) {
+			/* we just set the toplevel timeout, but per-client
+			 * timeouts may still be at defaults.
+			 */
+			for (ip=interfaces; ip; ip = ip->next) {
+				if (ip->client->config->timeout == 60)
+					ip->client->config->timeout = timeout_arg;
+			}
+		}
+
+		if ((dhclient_request_options != 0) && (top_level_config.requested_options != default_requested_options)) {
+			for (ip=interfaces; ip; ip = ip->next) {
+				if (ip->client->config->requested_options == default_requested_options)
+					ip->client->config->requested_options = top_level_config.requested_options;
+			}
+		}
+
+		free(arg_conf);
+		arg_conf = NULL;
+		arg_conf_len = 0;
+	}
+
 	/* Parse the lease database. */
 	read_client_leases();
 
@@ -756,6 +1006,10 @@ static void usage()
 		  "                [-s server-addr] [-cf config-file]\n"
 		  "                [-df duid-file] [-lf lease-file]\n"
 		  "                [-pf pid-file] [--no-pid] [-e VAR=val]\n"
+		  "                [-C <dhcp-client-identifier>] [-B]\n"
+		  "                [-H <host-name> | -F <fqdn.fqdn>] [-timeout <timeout>]\n"
+		  "                [-V <vendor-class-identifier>]\n"
+		  "                [-R <request option list>]\n"
 		  "                [-sf script-file] [interface]");
 }
 
@@ -2531,7 +2785,8 @@ void make_discover (client, lease)
 	client -> packet.xid = random ();
 	client -> packet.secs = 0; /* filled in by send_discover. */
 
-	if (can_receive_unicast_unconfigured (client -> interface))
+	if ((!(bootp_broadcast_always || client->config->bootp_broadcast_always))
+	    && can_receive_unicast_unconfigured(client->interface))
 		client -> packet.flags = 0;
 	else
 		client -> packet.flags = htons (BOOTP_BROADCAST);
@@ -2615,7 +2870,9 @@ void make_request (client, lease)
 	} else {
 		memset (&client -> packet.ciaddr, 0,
 			sizeof client -> packet.ciaddr);
-		if (can_receive_unicast_unconfigured (client -> interface))
+		if ((!(bootp_broadcast_always ||
+		    client ->config->bootp_broadcast_always)) &&
+		    can_receive_unicast_unconfigured (client -> interface))
 			client -> packet.flags = 0;
 		else
 			client -> packet.flags = htons (BOOTP_BROADCAST);
@@ -2677,7 +2934,8 @@ void make_decline (client, lease)
 	client -> packet.hops = 0;
 	client -> packet.xid = client -> xid;
 	client -> packet.secs = 0; /* Filled in by send_request. */
-	if (can_receive_unicast_unconfigured (client -> interface))
+	if ((!(bootp_broadcast_always || client->config-> bootp_broadcast_always))
+	    && can_receive_unicast_unconfigured (client->interface))
 		client -> packet.flags = 0;
 	else
 		client -> packet.flags = htons (BOOTP_BROADCAST);
diff -up dhcp-4.3.1b1/common/conflex.c.fLPqYB dhcp-4.3.1b1/common/conflex.c
--- dhcp-4.3.1b1/common/conflex.c.fLPqYB	2014-07-02 19:58:38.000000000 +0200
+++ dhcp-4.3.1b1/common/conflex.c	2014-07-10 17:38:26.940599374 +0200
@@ -811,6 +811,8 @@ intern(char *atom, enum dhcp_token dfv)
 			return BALANCE;
 		if (!strcasecmp (atom + 1, "ound"))
 			return BOUND;
+		if (!strcasecmp (atom + 1, "ootp-broadcast-always"))
+			return BOOTP_BROADCAST_ALWAYS;
 		break;
 	      case 'c':
 		if (!strcasecmp(atom + 1, "ase"))
diff -up dhcp-4.3.1b1/includes/dhcpd.h.fLPqYB dhcp-4.3.1b1/includes/dhcpd.h
--- dhcp-4.3.1b1/includes/dhcpd.h.fLPqYB	2014-07-02 19:58:39.000000000 +0200
+++ dhcp-4.3.1b1/includes/dhcpd.h	2014-07-10 17:38:26.941599360 +0200
@@ -1152,6 +1152,9 @@ struct client_config {
 	int do_forward_update;		/* If nonzero, and if we have the
 					   information we need, update the
 					   A record for the address we get. */
+
+	int bootp_broadcast_always;	/* If nonzero, always set the BOOTP_BROADCAST
+					   flag in requests */
 };
 
 /* Per-interface state used in the dhcp client... */
diff -up dhcp-4.3.1b1/includes/dhctoken.h.fLPqYB dhcp-4.3.1b1/includes/dhctoken.h
--- dhcp-4.3.1b1/includes/dhctoken.h.fLPqYB	2014-07-02 19:58:39.000000000 +0200
+++ dhcp-4.3.1b1/includes/dhctoken.h	2014-07-10 17:38:26.942599346 +0200
@@ -367,7 +367,8 @@ enum dhcp_token {
 	TOKEN_INFINIBAND = 668,
 	POOL6 = 669,
 	V6RELAY = 670,
-	V6RELOPT = 671
+	V6RELOPT = 671,
+	BOOTP_BROADCAST_ALWAYS = 672
 };
 
 #define is_identifier(x)	((x) >= FIRST_TOKEN &&	\

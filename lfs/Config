###############################################################################
#                                   LFSMake                                   #
#                    by Rod Roark <rod@sunsetsystems.com>                     #
#                                                                             #
#                        Copyright (C) 2002 Rod Roark                         #
#                                                                             #
# See http://www.lfsmake.org/ for the most current standard version.          #
#                                                                             #
# These Makefiles are made available under the terms of the Artistic License, #
# found at http://www.opensource.org/licenses/artistic-license.html.          #
###############################################################################

###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

# URLs that are common sources of downloads.  If you're having trouble with
# a site you should change its URL to that of a suitable mirror site.
#
URL_IPFIRE  = http://source.ipfire.org/source-2.x
URL_TOOLCHAIN = http://source.ipfire.org/toolchains
URL_SOURCE = source.ipfire.org:/pub/source/source-2.x

# Don't change this; it will be overridden by other makefiles where necessary.
#
ROOT =

# For most packages tarballs are unpacked here and then deleted after
# installation.
#
DIR_SRC = $(ROOT)/usr/src

# Files are downloaded into DIR_TMP and then moved to DIR_DL, to avoid
# messes with partially retrieved files.  DIR_DL is where we will
# save all the files that are downloaded.  DIR_INFO contains the
# file lists of installed packages.
#
DIR_DL      = $(LFS_BASEDIR)/cache
DIR_CHK     = $(LFS_BASEDIR)/cache/check
DIR_CONF    = $(LFS_BASEDIR)/config
DIR_INFO    = $(LFS_BASEDIR)/log
DIR_TMP     = /tmp

KGCC = gcc

###############################################################################
# Common Macro Definitions
###############################################################################

# For each package we create a list of files that it installed under 
# log/<TARGET> name. Modified files are not identified
#
define FIND_FILES
	cd $(ROOT)/ && find -mount \
	-not -path './tools*' -not -path './tmp*' -not -path './usr/src*' -not -path './run/*' \
	-not -path './dev*' -not -path './proc*' -not -path './install*' | sort
endef

# This is common starting logic for builds.
#
ifeq "$(ROOT)" ""
define PREBUILD
	echo "====================================== Installing $(THISAPP) ..."
	@echo "Install started; saving file list to $(DIR_SRC)/lsalr ..."
	@if [ ! -f $(DIR_SRC)/lsalr ]; then $(FIND_FILES) > $(DIR_SRC)/lsalr; fi
	# Fix installation on partial rebuild, so modules install where they should
	# and not everytime on the last compiled kernel
	if [ -f $(DIR_SRC)/linux-$(KVER) ]; then \
		cd $(DIR_SRC)/linux-$(KVER) && \
			sed -i -e 's+^EXTRAVERSION.*$$+EXTRAVERSION\ =\ $(word 4,$(subst ., .,$(KVER)))-ipfire$(KCFG)+' Makefile; \
	fi
endef
else
define PREBUILD
	echo "====================================== Installing $(THISAPP) ..."
endef
endif

# Common end-of-installation logic for Stage 2 and beyond.
#
ifeq "$(ROOT)" ""
define POSTBUILD
	@echo "Updating linker cache..."
	@type -p ldconfig >/dev/null && ldconfig || :
	@echo "Install done; saving file list to $(TARGET) ..."
	@$(FIND_FILES) > $(DIR_SRC)/lsalrnew
	@diff $(DIR_SRC)/lsalr $(DIR_SRC)/lsalrnew | grep '^> ' | sed 's/^> //' > $(TARGET)_diff
	@cp -f $(DIR_SRC)/lsalrnew $(DIR_SRC)/lsalr
	@rm -f $(DIR_SRC)/lsalrnew
	sed -i -e 's+.\/++' $(TARGET)_diff
	# compare roofile ( same name as lfs script) with the list of installed files
	# special cases
	# - if the corresponding rootfile is not found, touch $(TARGET)_missing_rootfile
	# - on a partial rebuild without a new file inside TARGET_diff, just touch TARGET
	# $(TARGET)_diff : result of the diff
	# ROOTFILE : reference of include/exclude files
	# $(TARGET)_rootfile : ROOTFILE with KVER replacement
	# $(TARGET) : log result with {commented|include|added} files
	if [ -s "$(TARGET)_diff" ]; then \
		LFS_SCRIPT=$(firstword $(MAKEFILE_LIST))$(KCFG); \
		echo $(LFS_SCRIPT); \
		ROOTFILE=$$(find $(DIR_SRC)/config/rootfiles/{common,packages}/{$(MACHINE),} -maxdepth 1 -type f -name $$LFS_SCRIPT 2>/dev/null | head -1); \
		if [ "$$ROOTFILE" = "" ]; then \
			touch $(TARGET)_missing_rootfile; \
			ROOTFILE=$(TARGET)_missing_rootfile ; \
			echo "error $$LFS_SCRIPT not found in config/rootfiles"; \
		fi; \
		sed -e "s/BUILDTARGET/$(BUILDTARGET)/g" -e "s/KVER/$(KVER)/g" -e "s/MACHINE/$(MACHINE)/g" $$ROOTFILE > $(TARGET)_rootfile; \
		for line in `cat $(TARGET)_diff`; do \
			if grep -qG "^#$$line$$" $(TARGET)_rootfile; then echo "#$$line" >> $(TARGET); \
			elif grep -qG "^$$line$$" $(TARGET)_rootfile ; then echo "$$line" >> $(TARGET); \
			else echo "+$$line" >> $(TARGET); \
			fi; \
		done; \
		for line in `grep -v "^#" $(TARGET)_rootfile`; do \
			if ! grep -qG "^$$line$$" $(TARGET)_diff ; then echo "-$$line" >> $(TARGET); \
			fi; \
		done; \
		rm -f $(TARGET)_rootfile; \
	else \
		touch $(TARGET); \
	fi
	@rm -f $(TARGET)_diff
endef
else
define POSTBUILD
	@echo "===================================== Install done for $(THISAPP)."
	touch $(TARGET)
endef
endif

define CHECK
	@echo -e "$(MESSAGE)Check: $($(notdir $@))"
	wget -T 120 -t 1 --spider -nv -U "IPFireSourceGrabber/2.x" $($(notdir $@)) -O /dev/null
	@touch $(DIR_CHK)/$(notdir $@)
endef

define LOAD
	@echo -e "$(MESSAGE)Download: $($(notdir $@))"
	wget -T 60 -t 1 -nv -U "IPFireSourceGrabber/2.x" $($(notdir $@)) -O $(DIR_TMP)/$(notdir $@)
	[ "$($(notdir $@)_MD5)" = `md5sum $(DIR_TMP)/$(notdir $@) | awk '{ print $$1 }'` ] # detect page not found answer
	mv $(DIR_TMP)/$(notdir $@) $(DIR_DL)
endef

define MD5
	# error mean file signature don't match the one in lfs script
	[ "$($@_MD5)" = `md5sum $(DIR_DL)/$@ | awk '{ print $$1 }'` ]
	echo "$@ checksum OK"
	echo "$@" >>$(DIR_INFO)/_build.othersrc-list.log
endef

define PAK
	# Bringing the files to their right place.
	@rm -rf /install/packages/package
	@mkdir -p /install/packages/package/tmp
	if [ -e "/usr/src/src/paks/$(PROG)" ]; then \
		cp -f /usr/src/src/paks/$(PROG)/{,un}install.sh /usr/src/src/paks/$(PROG)/update.sh \
		/install/packages/package; \
	else \
		cp -f /usr/src/src/paks/default/{,un}install.sh /usr/src/src/paks/default/update.sh \
		/install/packages/package; \
	fi
	for i in $(DIR_SRC)/config/rootfiles/packages/{$(MACHINE),}/$(PROG); do \
		if [ -e "$${i}" ]; then \
			cp -v $${i} /install/packages/package/ROOTFILES; \
			break; \
		fi; \
	done
	sed -e 's/BUILDTARGET/$(BUILDTARGET)/g' -e 's/KVER/$(KVER)/g' -e 's/MACHINE/$(MACHINE)/g' -i /install/packages/package/ROOTFILES
	sed -e 's/xxxKVERxxx/$(KVER)/g' -i /install/packages/package/install.sh
	chmod 755 /install/packages/package/{{,un}install,update}.sh
	cd / && tar cf /install/packages/package/files.tmp --files-from=/install/packages/package/ROOTFILES --exclude='#*' \
		-p --numeric-owner
	# Double tar to remove double files
	tar xf /install/packages/package/files.tmp -C /install/packages/package/tmp/ \
		-p --numeric-owner
	rm -f /install/packages/package/files.tmp
	cd /install/packages/package/tmp/ && tar -c -p --numeric-owner -J -f /install/packages/package/files.tar.xz * 		
	rm -r /install/packages/package/tmp
	-cat /install/packages/package/ROOTFILES | grep -v "#" > /install/packages/package/ROOTFILES.tmp
	mv /install/packages/package/ROOTFILES.tmp /install/packages/package/ROOTFILES
	cd /install/packages/package && tar cf ../$(PROG)-$(VER)-$(PAK_VER).ipfire --files-from=/usr/src/src/paks/files
	rm -rf /install/packages/package
	sed -e s/NAME/$(PROG)/g \
			-e s/VER/$(VER)/g \
			-e s/RELEASE/$(PAK_VER)/g \
			-e s/DEPS/$(DEPS)/g \
			-e s/SIZE/`ls -l \/install\/packages\/$(PROG)-$(VER)-$(PAK_VER).ipfire | awk '{ print $$5 }'`/g \
	  < /usr/src/src/pakfire/meta > /install/packages/meta-$(PROG)
endef

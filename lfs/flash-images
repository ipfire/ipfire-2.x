###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007-2014  IPFire Team  <info@ipfire.org>                     #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

VER = ipfire

THISAPP    = flash-image
TARGET     = $(DIR_INFO)/$(THISAPP)

DEVICE     = $(shell losetup -f)
PART_BOOT  = /dev/mapper/$(patsubst /dev/%,%,$(DEVICE))p1
PART_ROOT  = /dev/mapper/$(patsubst /dev/%,%,$(DEVICE))p3

ifeq "$(SCON)" "1"
	IMAGE_FILE = /install/images/$(SNAME)-$(VERSION).1gb-ext4-scon.$(MACHINE)-full-core$(CORE).img.gz
else
	IMAGE_FILE = /install/images/$(SNAME)-$(VERSION).1gb-ext4.$(MACHINE)-full-core$(CORE).img.gz
endif

FSTAB_FMT = UUID=%s %-8s %-4s %-10s %d %d\n

###############################################################################
# Top-level Rules
###############################################################################

install : $(TARGET)

check :

download :

md5 :

###############################################################################
# Installation Details
###############################################################################
MNThdd   := /install/harddisk
IMG      := /install/images/image.img

# All sizes in blocks
ifeq "$(MACHINE_TYPE)" "arm"
 BOOTLOADER =
 S_OFFSET = 8192

 # FAT32
 PART_TYPE = c
else
 BOOTLOADER = grub
 S_OFFSET = 8192

 # Logical
 PART_TYPE = L
endif

# /boot:  64MB - OFFSET
# /    : 750MB
S_BOOT := $(shell echo $$(( 131072 - $(S_OFFSET) )))
S_ROOT := 1536000

PADDING = 100 # MB

$(TARGET) : $(patsubst %,$(DIR_DL)/%,$(objects))
	# Stop if $(MNThdd) is still mounted
	mountpoint $(MNThdd) && exit 1 || exit 0

	rm -rf $(IMG) $(MNThdd) && mkdir -p $(MNThdd)

	# Allocate image on disk
	dd if=/dev/zero of=$(IMG) bs=512 count=$$(( $(S_OFFSET) + $(S_BOOT) + $(S_ROOT) ))
	losetup $(DEVICE) $(IMG)

	# Write Partition table
	echo -e "$(S_OFFSET),$(S_BOOT),$(PART_TYPE),*\n,0,0\n$$(( $(S_BOOT) + $(S_OFFSET) )),$(S_ROOT),L\n" \
		| sfdisk -D -uS -H 64 -S 32 $(DEVICE)

	kpartx -v -a $(DEVICE)

	# Format them
ifeq "$(PART_TYPE)" "c"
	mkfs.vfat $(PART_BOOT)
else
	mkfs.ext2 -F $(PART_BOOT)
endif
	mkfs.ext4 -O ^has_journal,extent -F $(PART_ROOT)

	# Most systems that use Flashimages has no RTC at boot
	# so the interval check should disables
	tune2fs -i0 $(PART_ROOT)

	# Mount root partition
	mount $(PART_ROOT) $(MNThdd)

	# Mount boot partition
	mkdir -pv $(MNThdd)/boot
	mount $(PART_BOOT) $(MNThdd)/boot

	# Install Pandaboard MLO and uboot first
ifeq "$(MACHINE_TYPE)" "arm"
	cp -v /boot/MLO $(MNThdd)/boot/
	cp -v /boot/u-boot.img $(MNThdd)/boot/
	cp -v /boot/zImage-ipfire-multi $(MNThdd)/boot/
	# work around a u-boot bug not find the folders sometimes
	mkdir -pv $(MNThdd)/boot/dtb-$(KVER)-ipfire-multi
	mkdir -pv $(MNThdd)/boot/dtb-$(KVER)-ipfire-kirkwood
	sync
	umount $(MNThdd)/boot
	mount $(PART_BOOT) $(MNThdd)/boot
endif

	# Install IPFire
ifneq "$(MACHINE_TYPE)" "arm"
	tar -x --lzma -C $(MNThdd)/ -f /install/cdrom/distro.img
else
	tar -x -C $(MNThdd)/ -f /install/cdrom/distro.img
endif
	echo "LANGUAGE=en" >> $(MNThdd)/var/ipfire/main/settings
	echo "HOSTNAME=$(SNAME)" >> $(MNThdd)/var/ipfire/main/settings
	echo "THEME=ipfire" >> $(MNThdd)/var/ipfire/main/settings

ifeq "$(SCON)" "1"
	# Enable serial console
	sed -i -e "s|1:2345:respawn:|#1:2345:respawn:|g" $(MNThdd)/etc/inittab
	sed -i -e "s|2:2345:respawn:|#2:2345:respawn:|g" $(MNThdd)/etc/inittab
	sed -i -e "s|3:2345:respawn:|#3:2345:respawn:|g" $(MNThdd)/etc/inittab
	sed -i -e "s|4:2345:respawn:|#4:2345:respawn:|g" $(MNThdd)/etc/inittab
	sed -i -e "s|5:2345:respawn:|#5:2345:respawn:|g" $(MNThdd)/etc/inittab
	sed -i -e "s|6:2345:respawn:|#6:2345:respawn:|g" $(MNThdd)/etc/inittab
	sed -i -e "s|#7:2345:respawn:|7:2345:respawn:|g" $(MNThdd)/etc/inittab

ifeq "$(MACHINE_TYPE)" "arm"
	sed -i -e "s| console=tty1 | console=ttyAMA0,115200n8 |g" $(MNThdd)/boot/cmdline.txt
	sed -i -e "s| console=tty1 | console=ttyO2,115200n8 |g" $(MNThdd)/boot/uEnv.txt
endif
endif

	-touch $(MNThdd)/lib/modules/$(KVER)-ipfire/modules.dep
	mkdir $(MNThdd)/proc
	mount --bind /proc $(MNThdd)/proc
	mount --bind /dev  $(MNThdd)/dev
	mount --bind /sys  $(MNThdd)/sys

	chroot $(MNThdd) /usr/bin/perl -e "require '/var/ipfire/lang.pl'; &Lang::BuildCacheLang"

	# Create /etc/fstab
	printf "$(FSTAB_FMT)" "$$(blkid -o value -s UUID $(PART_BOOT))" "/boot" \
		"auto" "defaults" 1 2 >  $(MNThdd)/etc/fstab
	printf "$(FSTAB_FMT)" "$$(blkid -o value -s UUID $(PART_ROOT))" "/" \
		"auto" "defaults" 1 1 >> $(MNThdd)/etc/fstab

ifeq "$(BOOTLOADER)" "grub"
ifeq "$(SCON)" "1"
	# Enable serial console on GRUB
	echo "GRUB_TERMINAL=\"serial\"" >> $(MNThdd)/etc/default/grub
	echo "GRUB_SERIAL_COMMAND=\"serial --unit=0 --speed=115200\"" >> $(MNThdd)/etc/default/grub

	sed -i -e "s|panic=10|& console=ttyS0,115200n8|g" $(MNThdd)/etc/default/grub
endif

	# Create configuration
	mkdir -pv $(MNThdd)/boot/grub
	chroot $(MNThdd) grub-mkconfig -o /boot/grub/grub.cfg

	# Insert the UUID because grub-mkconfig fails to detect that correctly
	sed -i $(MNThdd)/boot/grub/grub.cfg \
		-e "s/root=[a-z0-9\/]*/root=UUID=$$(blkid -o value -s UUID $(PART_ROOT))/g"

	# Install GRUB
	grub-install --force --recheck --no-floppy \
		--root-directory=$(MNThdd) $(DEVICE)
endif

	# Automatically resize the root partition to its maximum size at first boot
	touch $(MNThdd)/.partresize

	# Unmount
	umount $(MNThdd)/proc
	umount $(MNThdd)/sys
	umount $(MNThdd)/dev
	umount $(MNThdd)/boot
	umount $(MNThdd)

	# zerofree the ext2 images to get better compression
ifneq "$(PART_TYPE)" "c"
	zerofree $(PART_BOOT)
	-fsck.ext2 -f -y $(PART_BOOT)
	fsck.ext2 -f -y $(PART_BOOT)
endif
	zerofree $(PART_ROOT)
	-fsck.ext4 -f -y $(PART_ROOT)
	fsck.ext4 -f -y $(PART_ROOT)

	kpartx -d -v $(DEVICE)
	losetup -d $(DEVICE)

	# Add padding at the end of the image (to fix alignment issues if the image is
	# not copied to a block device)
	dd if=/dev/zero bs=1M count=$(PADDING) >> $(IMG)

ifeq "$(MACHINE_TYPE)" "arm"
	# Install u-boot for LeMaker Banana Pi into image 8KB
	dd if=/usr/share/u-boot/banana_pi/u-boot-sunxi-with-spl.bin of=$(IMG) bs=1K seek=8 conv=notrunc
endif

	# Compress Image
	pigz -f9 < $(IMG) > $(IMAGE_FILE)
	rm -rf $(IMG) $(MNThdd)
